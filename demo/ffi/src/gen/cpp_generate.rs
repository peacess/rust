/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone)]
    pub struct Data {
        pub a: ::std::os::raw::c_int,
        pub d: ::std::os::raw::c_char,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of Data"][::std::mem::size_of::<Data>() - 8usize];
        ["Alignment of Data"][::std::mem::align_of::<Data>() - 4usize];
        ["Offset of field: Data::a"][::std::mem::offset_of!(Data, a) - 0usize];
        ["Offset of field: Data::d"][::std::mem::offset_of!(Data, d) - 4usize];
    };
    unsafe extern "C" {
        pub fn f_int(i: ::std::os::raw::c_int);
    }
    unsafe extern "C" {
        pub fn f_int_ref(i: *mut ::std::os::raw::c_int);
    }
    unsafe extern "C" {
        pub fn f_int_p(p: *mut ::std::os::raw::c_int);
    }
    unsafe extern "C" {
        pub fn f_char(c: ::std::os::raw::c_char);
    }
    unsafe extern "C" {
        pub fn f_char_ref(c: *mut ::std::os::raw::c_char);
    }
    unsafe extern "C" {
        pub fn f_char_p(p: *mut ::std::os::raw::c_char);
    }
    unsafe extern "C" {
        pub fn f_data(d: root::Data);
    }
    unsafe extern "C" {
        pub fn f_data_ref(d: *mut root::Data);
    }
    unsafe extern "C" {
        pub fn f_data_p(d: *mut root::Data);
    }
}
